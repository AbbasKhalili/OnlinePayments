//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace OnlinePayment.SadadServiceSwitch1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MerchantUtilitySoap", Namespace="http://tempuri.org/")]
    public partial class MerchantUtility : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckRequestStatusWithRealTransactionDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRequestStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRequestStatusExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRequestStatusExWithRealTransactionDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRequestStatusResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRequestStatusResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthRequestStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBatchTransferStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBillStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpecificMerchantCommitReportByPageNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommitReportByPageNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommitReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionReportByPageNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionReportWithSettlementDateByPageNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePaymentIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidatePaymentIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateCheckDigitOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentUtilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentUtilityAdditionalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback PaymentUtilityOptionalParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback BillPaymentUtilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatchTransferUtilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalcTimeStampOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MerchantUtility()
        {
            this.Url = global::OnlinePayment.Properties.Settings.Default.OnlinePayment_SadadServiceSwitch1_MerchantUtility;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckRequestStatusWithRealTransactionDateTimeCompletedEventHandler CheckRequestStatusWithRealTransactionDateTimeCompleted;
        
        /// <remarks/>
        public event CheckRequestStatusCompletedEventHandler CheckRequestStatusCompleted;
        
        /// <remarks/>
        public event CheckRequestStatusExCompletedEventHandler CheckRequestStatusExCompleted;
        
        /// <remarks/>
        public event CheckRequestStatusExWithRealTransactionDateTimeCompletedEventHandler CheckRequestStatusExWithRealTransactionDateTimeCompleted;
        
        /// <remarks/>
        public event CheckRequestStatusResultCompletedEventHandler CheckRequestStatusResultCompleted;
        
        /// <remarks/>
        public event GetRequestStatusResultCompletedEventHandler GetRequestStatusResultCompleted;
        
        /// <remarks/>
        public event GetAuthRequestStatusCompletedEventHandler GetAuthRequestStatusCompleted;
        
        /// <remarks/>
        public event CheckBatchTransferStatusCompletedEventHandler CheckBatchTransferStatusCompleted;
        
        /// <remarks/>
        public event CheckBillStatusCompletedEventHandler CheckBillStatusCompleted;
        
        /// <remarks/>
        public event GetSpecificMerchantCommitReportByPageNumberCompletedEventHandler GetSpecificMerchantCommitReportByPageNumberCompleted;
        
        /// <remarks/>
        public event GetCommitReportByPageNumberCompletedEventHandler GetCommitReportByPageNumberCompleted;
        
        /// <remarks/>
        public event GetCommitReportCompletedEventHandler GetCommitReportCompleted;
        
        /// <remarks/>
        public event GetTransactionReportCompletedEventHandler GetTransactionReportCompleted;
        
        /// <remarks/>
        public event GetTransactionReportByPageNumberCompletedEventHandler GetTransactionReportByPageNumberCompleted;
        
        /// <remarks/>
        public event GetTransactionReportWithSettlementDateByPageNumberCompletedEventHandler GetTransactionReportWithSettlementDateByPageNumberCompleted;
        
        /// <remarks/>
        public event GeneratePaymentIDCompletedEventHandler GeneratePaymentIDCompleted;
        
        /// <remarks/>
        public event ValidatePaymentIDCompletedEventHandler ValidatePaymentIDCompleted;
        
        /// <remarks/>
        public event GenerateCheckDigitCompletedEventHandler GenerateCheckDigitCompleted;
        
        /// <remarks/>
        public event PaymentUtilityCompletedEventHandler PaymentUtilityCompleted;
        
        /// <remarks/>
        public event PaymentUtilityAdditionalDataCompletedEventHandler PaymentUtilityAdditionalDataCompleted;
        
        /// <remarks/>
        public event PaymentUtilityOptionalParameterCompletedEventHandler PaymentUtilityOptionalParameterCompleted;
        
        /// <remarks/>
        public event BillPaymentUtilityCompletedEventHandler BillPaymentUtilityCompleted;
        
        /// <remarks/>
        public event BatchTransferUtilityCompletedEventHandler BatchTransferUtilityCompleted;
        
        /// <remarks/>
        public event CalcTimeStampCompletedEventHandler CalcTimeStampCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/CheckRequestStatusWithRealTransactionDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int CheckRequestStatusWithRealTransactionDateTime(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans, out string RetrivalRefNo, out string AppStatus, out string RealTransactionDateTime) {
            object[] results = this.Invoke("CheckRequestStatusWithRealTransactionDateTime", new object[] {
                        OrderID,
                        CardAcqID,
                        TerminalID,
                        TransactionKey,
                        RequestKey,
                        AmountTrans});
            RetrivalRefNo = ((string)(results[1]));
            AppStatus = ((string)(results[2]));
            RealTransactionDateTime = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRequestStatusWithRealTransactionDateTimeAsync(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans) {
            this.CheckRequestStatusWithRealTransactionDateTimeAsync(OrderID, CardAcqID, TerminalID, TransactionKey, RequestKey, AmountTrans, null);
        }
        
        /// <remarks/>
        public void CheckRequestStatusWithRealTransactionDateTimeAsync(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans, object userState) {
            if ((this.CheckRequestStatusWithRealTransactionDateTimeOperationCompleted == null)) {
                this.CheckRequestStatusWithRealTransactionDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusWithRealTransactionDateTimeOperationCompleted);
            }
            this.InvokeAsync("CheckRequestStatusWithRealTransactionDateTime", new object[] {
                        OrderID,
                        CardAcqID,
                        TerminalID,
                        TransactionKey,
                        RequestKey,
                        AmountTrans}, this.CheckRequestStatusWithRealTransactionDateTimeOperationCompleted, userState);
        }
        
        private void OnCheckRequestStatusWithRealTransactionDateTimeOperationCompleted(object arg) {
            if ((this.CheckRequestStatusWithRealTransactionDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRequestStatusWithRealTransactionDateTimeCompleted(this, new CheckRequestStatusWithRealTransactionDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/CheckRequestStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int CheckRequestStatus(long OrderID, string CardAcqID, string TerminalID, string transactionKey, string RequestKey, long AmountTrans, out string RetrivalRefNo, out string AppStatus) {
            object[] results = this.Invoke("CheckRequestStatus", new object[] {
                        OrderID,
                        CardAcqID,
                        TerminalID,
                        transactionKey,
                        RequestKey,
                        AmountTrans});
            RetrivalRefNo = ((string)(results[1]));
            AppStatus = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRequestStatusAsync(long OrderID, string CardAcqID, string TerminalID, string transactionKey, string RequestKey, long AmountTrans) {
            this.CheckRequestStatusAsync(OrderID, CardAcqID, TerminalID, transactionKey, RequestKey, AmountTrans, null);
        }
        
        /// <remarks/>
        public void CheckRequestStatusAsync(long OrderID, string CardAcqID, string TerminalID, string transactionKey, string RequestKey, long AmountTrans, object userState) {
            if ((this.CheckRequestStatusOperationCompleted == null)) {
                this.CheckRequestStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusOperationCompleted);
            }
            this.InvokeAsync("CheckRequestStatus", new object[] {
                        OrderID,
                        CardAcqID,
                        TerminalID,
                        transactionKey,
                        RequestKey,
                        AmountTrans}, this.CheckRequestStatusOperationCompleted, userState);
        }
        
        private void OnCheckRequestStatusOperationCompleted(object arg) {
            if ((this.CheckRequestStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRequestStatusCompleted(this, new CheckRequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/CheckRequestStatusEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int CheckRequestStatusEx(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, out string RetrievalRefNo, out string AppStatus) {
            object[] results = this.Invoke("CheckRequestStatusEx", new object[] {
                        OrderID,
                        AmountTrans,
                        CardAcqID,
                        TerminalID,
                        RequestKey,
                        TimeStamp,
                        FP});
            RetrievalRefNo = ((string)(results[1]));
            AppStatus = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRequestStatusExAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP) {
            this.CheckRequestStatusExAsync(OrderID, AmountTrans, CardAcqID, TerminalID, RequestKey, TimeStamp, FP, null);
        }
        
        /// <remarks/>
        public void CheckRequestStatusExAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, object userState) {
            if ((this.CheckRequestStatusExOperationCompleted == null)) {
                this.CheckRequestStatusExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusExOperationCompleted);
            }
            this.InvokeAsync("CheckRequestStatusEx", new object[] {
                        OrderID,
                        AmountTrans,
                        CardAcqID,
                        TerminalID,
                        RequestKey,
                        TimeStamp,
                        FP}, this.CheckRequestStatusExOperationCompleted, userState);
        }
        
        private void OnCheckRequestStatusExOperationCompleted(object arg) {
            if ((this.CheckRequestStatusExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRequestStatusExCompleted(this, new CheckRequestStatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/CheckRequestStatusExWithRealTransactionDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int CheckRequestStatusExWithRealTransactionDateTime(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, out string RetrievalRefNo, out string AppStatus, out string RealTransactionDateTime) {
            object[] results = this.Invoke("CheckRequestStatusExWithRealTransactionDateTime", new object[] {
                        OrderID,
                        AmountTrans,
                        CardAcqID,
                        TerminalID,
                        RequestKey,
                        TimeStamp,
                        FP});
            RetrievalRefNo = ((string)(results[1]));
            AppStatus = ((string)(results[2]));
            RealTransactionDateTime = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRequestStatusExWithRealTransactionDateTimeAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP) {
            this.CheckRequestStatusExWithRealTransactionDateTimeAsync(OrderID, AmountTrans, CardAcqID, TerminalID, RequestKey, TimeStamp, FP, null);
        }
        
        /// <remarks/>
        public void CheckRequestStatusExWithRealTransactionDateTimeAsync(long OrderID, long AmountTrans, string CardAcqID, string TerminalID, string RequestKey, string TimeStamp, string FP, object userState) {
            if ((this.CheckRequestStatusExWithRealTransactionDateTimeOperationCompleted == null)) {
                this.CheckRequestStatusExWithRealTransactionDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusExWithRealTransactionDateTimeOperationCompleted);
            }
            this.InvokeAsync("CheckRequestStatusExWithRealTransactionDateTime", new object[] {
                        OrderID,
                        AmountTrans,
                        CardAcqID,
                        TerminalID,
                        RequestKey,
                        TimeStamp,
                        FP}, this.CheckRequestStatusExWithRealTransactionDateTimeOperationCompleted, userState);
        }
        
        private void OnCheckRequestStatusExWithRealTransactionDateTimeOperationCompleted(object arg) {
            if ((this.CheckRequestStatusExWithRealTransactionDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRequestStatusExWithRealTransactionDateTimeCompleted(this, new CheckRequestStatusExWithRealTransactionDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/CheckRequestStatusWithResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public CheckStatusResult CheckRequestStatusResult(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans) {
            object[] results = this.Invoke("CheckRequestStatusResult", new object[] {
                        OrderID,
                        CardAcqID,
                        TerminalID,
                        TransactionKey,
                        RequestKey,
                        AmountTrans});
            return ((CheckStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRequestStatusResultAsync(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans) {
            this.CheckRequestStatusResultAsync(OrderID, CardAcqID, TerminalID, TransactionKey, RequestKey, AmountTrans, null);
        }
        
        /// <remarks/>
        public void CheckRequestStatusResultAsync(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans, object userState) {
            if ((this.CheckRequestStatusResultOperationCompleted == null)) {
                this.CheckRequestStatusResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRequestStatusResultOperationCompleted);
            }
            this.InvokeAsync("CheckRequestStatusResult", new object[] {
                        OrderID,
                        CardAcqID,
                        TerminalID,
                        TransactionKey,
                        RequestKey,
                        AmountTrans}, this.CheckRequestStatusResultOperationCompleted, userState);
        }
        
        private void OnCheckRequestStatusResultOperationCompleted(object arg) {
            if ((this.CheckRequestStatusResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRequestStatusResultCompleted(this, new CheckRequestStatusResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GetRequestStatusResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public CheckStatusResult GetRequestStatusResult(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans) {
            object[] results = this.Invoke("GetRequestStatusResult", new object[] {
                        OrderID,
                        CardAcqID,
                        TerminalID,
                        TransactionKey,
                        RequestKey,
                        AmountTrans});
            return ((CheckStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetRequestStatusResultAsync(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans) {
            this.GetRequestStatusResultAsync(OrderID, CardAcqID, TerminalID, TransactionKey, RequestKey, AmountTrans, null);
        }
        
        /// <remarks/>
        public void GetRequestStatusResultAsync(long OrderID, string CardAcqID, string TerminalID, string TransactionKey, string RequestKey, long AmountTrans, object userState) {
            if ((this.GetRequestStatusResultOperationCompleted == null)) {
                this.GetRequestStatusResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestStatusResultOperationCompleted);
            }
            this.InvokeAsync("GetRequestStatusResult", new object[] {
                        OrderID,
                        CardAcqID,
                        TerminalID,
                        TransactionKey,
                        RequestKey,
                        AmountTrans}, this.GetRequestStatusResultOperationCompleted, userState);
        }
        
        private void OnGetRequestStatusResultOperationCompleted(object arg) {
            if ((this.GetRequestStatusResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRequestStatusResultCompleted(this, new GetRequestStatusResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GetAuthRequestStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public CheckStatusResult GetAuthRequestStatus(string CardAcqID, string TerminalID, long OrderID, string RequestKey, string CardNumber) {
            object[] results = this.Invoke("GetAuthRequestStatus", new object[] {
                        CardAcqID,
                        TerminalID,
                        OrderID,
                        RequestKey,
                        CardNumber});
            return ((CheckStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthRequestStatusAsync(string CardAcqID, string TerminalID, long OrderID, string RequestKey, string CardNumber) {
            this.GetAuthRequestStatusAsync(CardAcqID, TerminalID, OrderID, RequestKey, CardNumber, null);
        }
        
        /// <remarks/>
        public void GetAuthRequestStatusAsync(string CardAcqID, string TerminalID, long OrderID, string RequestKey, string CardNumber, object userState) {
            if ((this.GetAuthRequestStatusOperationCompleted == null)) {
                this.GetAuthRequestStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthRequestStatusOperationCompleted);
            }
            this.InvokeAsync("GetAuthRequestStatus", new object[] {
                        CardAcqID,
                        TerminalID,
                        OrderID,
                        RequestKey,
                        CardNumber}, this.GetAuthRequestStatusOperationCompleted, userState);
        }
        
        private void OnGetAuthRequestStatusOperationCompleted(object arg) {
            if ((this.GetAuthRequestStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthRequestStatusCompleted(this, new GetAuthRequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/CheckBatchTransferStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public CheckStatusResult CheckBatchTransferStatus(string CardAcqID, string TerminalID, long OrderID, string RequestKey, string CardNum, long Amount) {
            object[] results = this.Invoke("CheckBatchTransferStatus", new object[] {
                        CardAcqID,
                        TerminalID,
                        OrderID,
                        RequestKey,
                        CardNum,
                        Amount});
            return ((CheckStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBatchTransferStatusAsync(string CardAcqID, string TerminalID, long OrderID, string RequestKey, string CardNum, long Amount) {
            this.CheckBatchTransferStatusAsync(CardAcqID, TerminalID, OrderID, RequestKey, CardNum, Amount, null);
        }
        
        /// <remarks/>
        public void CheckBatchTransferStatusAsync(string CardAcqID, string TerminalID, long OrderID, string RequestKey, string CardNum, long Amount, object userState) {
            if ((this.CheckBatchTransferStatusOperationCompleted == null)) {
                this.CheckBatchTransferStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBatchTransferStatusOperationCompleted);
            }
            this.InvokeAsync("CheckBatchTransferStatus", new object[] {
                        CardAcqID,
                        TerminalID,
                        OrderID,
                        RequestKey,
                        CardNum,
                        Amount}, this.CheckBatchTransferStatusOperationCompleted, userState);
        }
        
        private void OnCheckBatchTransferStatusOperationCompleted(object arg) {
            if ((this.CheckBatchTransferStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBatchTransferStatusCompleted(this, new CheckBatchTransferStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/CheckBillStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public CheckStatusResult CheckBillStatus(string CardAcqID, string TerminalID, long OrderID, string RequestKey, long BillID, long BillPaymentID) {
            object[] results = this.Invoke("CheckBillStatus", new object[] {
                        CardAcqID,
                        TerminalID,
                        OrderID,
                        RequestKey,
                        BillID,
                        BillPaymentID});
            return ((CheckStatusResult)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBillStatusAsync(string CardAcqID, string TerminalID, long OrderID, string RequestKey, long BillID, long BillPaymentID) {
            this.CheckBillStatusAsync(CardAcqID, TerminalID, OrderID, RequestKey, BillID, BillPaymentID, null);
        }
        
        /// <remarks/>
        public void CheckBillStatusAsync(string CardAcqID, string TerminalID, long OrderID, string RequestKey, long BillID, long BillPaymentID, object userState) {
            if ((this.CheckBillStatusOperationCompleted == null)) {
                this.CheckBillStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBillStatusOperationCompleted);
            }
            this.InvokeAsync("CheckBillStatus", new object[] {
                        CardAcqID,
                        TerminalID,
                        OrderID,
                        RequestKey,
                        BillID,
                        BillPaymentID}, this.CheckBillStatusOperationCompleted, userState);
        }
        
        private void OnCheckBillStatusOperationCompleted(object arg) {
            if ((this.CheckBillStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBillStatusCompleted(this, new CheckBillStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GetSpecificMerchantCommitReportByPageNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlArrayAttribute()]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://tempuri.org/")]
        public Transaction[] GetSpecificMerchantCommitReportByPageNumber(long Caller_MerchantId, long Caller_TerminalId, string Caller_TimeStamp, string Caller_FP, long MerchantId, long TerminalId, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber, out int TotalPage) {
            object[] results = this.Invoke("GetSpecificMerchantCommitReportByPageNumber", new object[] {
                        Caller_MerchantId,
                        Caller_TerminalId,
                        Caller_TimeStamp,
                        Caller_FP,
                        MerchantId,
                        TerminalId,
                        FromShamsiDate,
                        ToShamsiDate,
                        FromHour,
                        ToHour,
                        TraceNo,
                        Amount,
                        OrderId,
                        PageNumber});
            TotalPage = ((int)(results[1]));
            return ((Transaction[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSpecificMerchantCommitReportByPageNumberAsync(long Caller_MerchantId, long Caller_TerminalId, string Caller_TimeStamp, string Caller_FP, long MerchantId, long TerminalId, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber) {
            this.GetSpecificMerchantCommitReportByPageNumberAsync(Caller_MerchantId, Caller_TerminalId, Caller_TimeStamp, Caller_FP, MerchantId, TerminalId, FromShamsiDate, ToShamsiDate, FromHour, ToHour, TraceNo, Amount, OrderId, PageNumber, null);
        }
        
        /// <remarks/>
        public void GetSpecificMerchantCommitReportByPageNumberAsync(long Caller_MerchantId, long Caller_TerminalId, string Caller_TimeStamp, string Caller_FP, long MerchantId, long TerminalId, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber, object userState) {
            if ((this.GetSpecificMerchantCommitReportByPageNumberOperationCompleted == null)) {
                this.GetSpecificMerchantCommitReportByPageNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpecificMerchantCommitReportByPageNumberOperationCompleted);
            }
            this.InvokeAsync("GetSpecificMerchantCommitReportByPageNumber", new object[] {
                        Caller_MerchantId,
                        Caller_TerminalId,
                        Caller_TimeStamp,
                        Caller_FP,
                        MerchantId,
                        TerminalId,
                        FromShamsiDate,
                        ToShamsiDate,
                        FromHour,
                        ToHour,
                        TraceNo,
                        Amount,
                        OrderId,
                        PageNumber}, this.GetSpecificMerchantCommitReportByPageNumberOperationCompleted, userState);
        }
        
        private void OnGetSpecificMerchantCommitReportByPageNumberOperationCompleted(object arg) {
            if ((this.GetSpecificMerchantCommitReportByPageNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpecificMerchantCommitReportByPageNumberCompleted(this, new GetSpecificMerchantCommitReportByPageNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GetCommitReportByPageNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetCommitReportByPageNumber(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber, out int TotalPage, out string XMLReportSchema) {
            object[] results = this.Invoke("GetCommitReportByPageNumber", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        FromShamsiDate,
                        ToShamsiDate,
                        FromHour,
                        ToHour,
                        TraceNo,
                        Amount,
                        OrderId,
                        PageNumber});
            TotalPage = ((int)(results[1]));
            XMLReportSchema = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommitReportByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber) {
            this.GetCommitReportByPageNumberAsync(MerchantId, Terminal, TimeStamp, FP, FromShamsiDate, ToShamsiDate, FromHour, ToHour, TraceNo, Amount, OrderId, PageNumber, null);
        }
        
        /// <remarks/>
        public void GetCommitReportByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, int PageNumber, object userState) {
            if ((this.GetCommitReportByPageNumberOperationCompleted == null)) {
                this.GetCommitReportByPageNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitReportByPageNumberOperationCompleted);
            }
            this.InvokeAsync("GetCommitReportByPageNumber", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        FromShamsiDate,
                        ToShamsiDate,
                        FromHour,
                        ToHour,
                        TraceNo,
                        Amount,
                        OrderId,
                        PageNumber}, this.GetCommitReportByPageNumberOperationCompleted, userState);
        }
        
        private void OnGetCommitReportByPageNumberOperationCompleted(object arg) {
            if ((this.GetCommitReportByPageNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommitReportByPageNumberCompleted(this, new GetCommitReportByPageNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GetCommitReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetCommitReport(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, out string XMLReportSchema) {
            object[] results = this.Invoke("GetCommitReport", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        FromShamsiDate,
                        ToShamsiDate,
                        FromHour,
                        ToHour,
                        TraceNo,
                        Amount,
                        OrderId});
            XMLReportSchema = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommitReportAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId) {
            this.GetCommitReportAsync(MerchantId, Terminal, TimeStamp, FP, FromShamsiDate, ToShamsiDate, FromHour, ToHour, TraceNo, Amount, OrderId, null);
        }
        
        /// <remarks/>
        public void GetCommitReportAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string FromShamsiDate, string ToShamsiDate, string FromHour, string ToHour, string TraceNo, string Amount, string OrderId, object userState) {
            if ((this.GetCommitReportOperationCompleted == null)) {
                this.GetCommitReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommitReportOperationCompleted);
            }
            this.InvokeAsync("GetCommitReport", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        FromShamsiDate,
                        ToShamsiDate,
                        FromHour,
                        ToHour,
                        TraceNo,
                        Amount,
                        OrderId}, this.GetCommitReportOperationCompleted, userState);
        }
        
        private void OnGetCommitReportOperationCompleted(object arg) {
            if ((this.GetCommitReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommitReportCompleted(this, new GetCommitReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GetTransactionReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetTransactionReport(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, out string XMLReportSchema) {
            object[] results = this.Invoke("GetTransactionReport", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        ShamsiDate});
            XMLReportSchema = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionReportAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate) {
            this.GetTransactionReportAsync(MerchantId, Terminal, TimeStamp, FP, ShamsiDate, null);
        }
        
        /// <remarks/>
        public void GetTransactionReportAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, object userState) {
            if ((this.GetTransactionReportOperationCompleted == null)) {
                this.GetTransactionReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionReportOperationCompleted);
            }
            this.InvokeAsync("GetTransactionReport", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        ShamsiDate}, this.GetTransactionReportOperationCompleted, userState);
        }
        
        private void OnGetTransactionReportOperationCompleted(object arg) {
            if ((this.GetTransactionReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionReportCompleted(this, new GetTransactionReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GetTransactionReportByPageNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetTransactionReportByPageNumber(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, int PageNumber, out int TotalPage, out string XMLReportSchema) {
            object[] results = this.Invoke("GetTransactionReportByPageNumber", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        ShamsiDate,
                        PageNumber});
            TotalPage = ((int)(results[1]));
            XMLReportSchema = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionReportByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, int PageNumber) {
            this.GetTransactionReportByPageNumberAsync(MerchantId, Terminal, TimeStamp, FP, ShamsiDate, PageNumber, null);
        }
        
        /// <remarks/>
        public void GetTransactionReportByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, int PageNumber, object userState) {
            if ((this.GetTransactionReportByPageNumberOperationCompleted == null)) {
                this.GetTransactionReportByPageNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionReportByPageNumberOperationCompleted);
            }
            this.InvokeAsync("GetTransactionReportByPageNumber", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        ShamsiDate,
                        PageNumber}, this.GetTransactionReportByPageNumberOperationCompleted, userState);
        }
        
        private void OnGetTransactionReportByPageNumberOperationCompleted(object arg) {
            if ((this.GetTransactionReportByPageNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionReportByPageNumberCompleted(this, new GetTransactionReportByPageNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GetTransactionReportWithSatlementDateByPageNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetTransactionReportWithSettlementDateByPageNumber(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, string SettlementDate, int PageNumber, out int TotalPage, out string XMLReportSchema) {
            object[] results = this.Invoke("GetTransactionReportWithSettlementDateByPageNumber", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        ShamsiDate,
                        SettlementDate,
                        PageNumber});
            TotalPage = ((int)(results[1]));
            XMLReportSchema = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionReportWithSettlementDateByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, string SettlementDate, int PageNumber) {
            this.GetTransactionReportWithSettlementDateByPageNumberAsync(MerchantId, Terminal, TimeStamp, FP, ShamsiDate, SettlementDate, PageNumber, null);
        }
        
        /// <remarks/>
        public void GetTransactionReportWithSettlementDateByPageNumberAsync(string MerchantId, string Terminal, string TimeStamp, string FP, string ShamsiDate, string SettlementDate, int PageNumber, object userState) {
            if ((this.GetTransactionReportWithSettlementDateByPageNumberOperationCompleted == null)) {
                this.GetTransactionReportWithSettlementDateByPageNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionReportWithSettlementDateByPageNumberOperationCompleted);
            }
            this.InvokeAsync("GetTransactionReportWithSettlementDateByPageNumber", new object[] {
                        MerchantId,
                        Terminal,
                        TimeStamp,
                        FP,
                        ShamsiDate,
                        SettlementDate,
                        PageNumber}, this.GetTransactionReportWithSettlementDateByPageNumberOperationCompleted, userState);
        }
        
        private void OnGetTransactionReportWithSettlementDateByPageNumberOperationCompleted(object arg) {
            if ((this.GetTransactionReportWithSettlementDateByPageNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionReportWithSettlementDateByPageNumberCompleted(this, new GetTransactionReportWithSettlementDateByPageNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GeneratePaymentID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GeneratePaymentID(string ID) {
            object[] results = this.Invoke("GeneratePaymentID", new object[] {
                        ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePaymentIDAsync(string ID) {
            this.GeneratePaymentIDAsync(ID, null);
        }
        
        /// <remarks/>
        public void GeneratePaymentIDAsync(string ID, object userState) {
            if ((this.GeneratePaymentIDOperationCompleted == null)) {
                this.GeneratePaymentIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePaymentIDOperationCompleted);
            }
            this.InvokeAsync("GeneratePaymentID", new object[] {
                        ID}, this.GeneratePaymentIDOperationCompleted, userState);
        }
        
        private void OnGeneratePaymentIDOperationCompleted(object arg) {
            if ((this.GeneratePaymentIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePaymentIDCompleted(this, new GeneratePaymentIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/ValidatePaymentID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool ValidatePaymentID(string ID) {
            object[] results = this.Invoke("ValidatePaymentID", new object[] {
                        ID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidatePaymentIDAsync(string ID) {
            this.ValidatePaymentIDAsync(ID, null);
        }
        
        /// <remarks/>
        public void ValidatePaymentIDAsync(string ID, object userState) {
            if ((this.ValidatePaymentIDOperationCompleted == null)) {
                this.ValidatePaymentIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePaymentIDOperationCompleted);
            }
            this.InvokeAsync("ValidatePaymentID", new object[] {
                        ID}, this.ValidatePaymentIDOperationCompleted, userState);
        }
        
        private void OnValidatePaymentIDOperationCompleted(object arg) {
            if ((this.ValidatePaymentIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidatePaymentIDCompleted(this, new ValidatePaymentIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/GenerateCheckDigit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GenerateCheckDigit(string ID) {
            object[] results = this.Invoke("GenerateCheckDigit", new object[] {
                        ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateCheckDigitAsync(string ID) {
            this.GenerateCheckDigitAsync(ID, null);
        }
        
        /// <remarks/>
        public void GenerateCheckDigitAsync(string ID, object userState) {
            if ((this.GenerateCheckDigitOperationCompleted == null)) {
                this.GenerateCheckDigitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateCheckDigitOperationCompleted);
            }
            this.InvokeAsync("GenerateCheckDigit", new object[] {
                        ID}, this.GenerateCheckDigitOperationCompleted, userState);
        }
        
        private void OnGenerateCheckDigitOperationCompleted(object arg) {
            if ((this.GenerateCheckDigitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateCheckDigitCompleted(this, new GenerateCheckDigitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/PaymentUtility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PaymentUtility(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, out string RequestKey) {
            object[] results = this.Invoke("PaymentUtility", new object[] {
                        CardAcqID,
                        AmountTrans,
                        OrderId,
                        transactionKey,
                        TerminalId,
                        RedirectURL});
            RequestKey = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentUtilityAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL) {
            this.PaymentUtilityAsync(CardAcqID, AmountTrans, OrderId, transactionKey, TerminalId, RedirectURL, null);
        }
        
        /// <remarks/>
        public void PaymentUtilityAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, object userState) {
            if ((this.PaymentUtilityOperationCompleted == null)) {
                this.PaymentUtilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentUtilityOperationCompleted);
            }
            this.InvokeAsync("PaymentUtility", new object[] {
                        CardAcqID,
                        AmountTrans,
                        OrderId,
                        transactionKey,
                        TerminalId,
                        RedirectURL}, this.PaymentUtilityOperationCompleted, userState);
        }
        
        private void OnPaymentUtilityOperationCompleted(object arg) {
            if ((this.PaymentUtilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentUtilityCompleted(this, new PaymentUtilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/PaymentUtilityAdditionalData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PaymentUtilityAdditionalData(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, out string RequestKey) {
            object[] results = this.Invoke("PaymentUtilityAdditionalData", new object[] {
                        CardAcqID,
                        AmountTrans,
                        OrderId,
                        transactionKey,
                        TerminalId,
                        RedirectURL,
                        MerchantAdditionalData});
            RequestKey = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentUtilityAdditionalDataAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData) {
            this.PaymentUtilityAdditionalDataAsync(CardAcqID, AmountTrans, OrderId, transactionKey, TerminalId, RedirectURL, MerchantAdditionalData, null);
        }
        
        /// <remarks/>
        public void PaymentUtilityAdditionalDataAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, object userState) {
            if ((this.PaymentUtilityAdditionalDataOperationCompleted == null)) {
                this.PaymentUtilityAdditionalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentUtilityAdditionalDataOperationCompleted);
            }
            this.InvokeAsync("PaymentUtilityAdditionalData", new object[] {
                        CardAcqID,
                        AmountTrans,
                        OrderId,
                        transactionKey,
                        TerminalId,
                        RedirectURL,
                        MerchantAdditionalData}, this.PaymentUtilityAdditionalDataOperationCompleted, userState);
        }
        
        private void OnPaymentUtilityAdditionalDataOperationCompleted(object arg) {
            if ((this.PaymentUtilityAdditionalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentUtilityAdditionalDataCompleted(this, new PaymentUtilityAdditionalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/PaymentUtilityOptionalParameter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string PaymentUtilityOptionalParameter(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, string OptionalPaymentParameter, out string RequestKey) {
            object[] results = this.Invoke("PaymentUtilityOptionalParameter", new object[] {
                        CardAcqID,
                        AmountTrans,
                        OrderId,
                        transactionKey,
                        TerminalId,
                        RedirectURL,
                        MerchantAdditionalData,
                        CustomerEmailAddress,
                        OptionalPaymentParameter});
            RequestKey = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PaymentUtilityOptionalParameterAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, string OptionalPaymentParameter) {
            this.PaymentUtilityOptionalParameterAsync(CardAcqID, AmountTrans, OrderId, transactionKey, TerminalId, RedirectURL, MerchantAdditionalData, CustomerEmailAddress, OptionalPaymentParameter, null);
        }
        
        /// <remarks/>
        public void PaymentUtilityOptionalParameterAsync(string CardAcqID, long AmountTrans, long OrderId, string transactionKey, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, string OptionalPaymentParameter, object userState) {
            if ((this.PaymentUtilityOptionalParameterOperationCompleted == null)) {
                this.PaymentUtilityOptionalParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPaymentUtilityOptionalParameterOperationCompleted);
            }
            this.InvokeAsync("PaymentUtilityOptionalParameter", new object[] {
                        CardAcqID,
                        AmountTrans,
                        OrderId,
                        transactionKey,
                        TerminalId,
                        RedirectURL,
                        MerchantAdditionalData,
                        CustomerEmailAddress,
                        OptionalPaymentParameter}, this.PaymentUtilityOptionalParameterOperationCompleted, userState);
        }
        
        private void OnPaymentUtilityOptionalParameterOperationCompleted(object arg) {
            if ((this.PaymentUtilityOptionalParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PaymentUtilityOptionalParameterCompleted(this, new PaymentUtilityOptionalParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/BillPaymentUtility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string BillPaymentUtility(string CardAcqID, long OrderId, string transactionKey, string BillList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, out string RequestKey) {
            object[] results = this.Invoke("BillPaymentUtility", new object[] {
                        CardAcqID,
                        OrderId,
                        transactionKey,
                        BillList,
                        TerminalId,
                        RedirectURL,
                        MerchantAdditionalData,
                        CustomerEmailAddress});
            RequestKey = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BillPaymentUtilityAsync(string CardAcqID, long OrderId, string transactionKey, string BillList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress) {
            this.BillPaymentUtilityAsync(CardAcqID, OrderId, transactionKey, BillList, TerminalId, RedirectURL, MerchantAdditionalData, CustomerEmailAddress, null);
        }
        
        /// <remarks/>
        public void BillPaymentUtilityAsync(string CardAcqID, long OrderId, string transactionKey, string BillList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, object userState) {
            if ((this.BillPaymentUtilityOperationCompleted == null)) {
                this.BillPaymentUtilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBillPaymentUtilityOperationCompleted);
            }
            this.InvokeAsync("BillPaymentUtility", new object[] {
                        CardAcqID,
                        OrderId,
                        transactionKey,
                        BillList,
                        TerminalId,
                        RedirectURL,
                        MerchantAdditionalData,
                        CustomerEmailAddress}, this.BillPaymentUtilityOperationCompleted, userState);
        }
        
        private void OnBillPaymentUtilityOperationCompleted(object arg) {
            if ((this.BillPaymentUtilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BillPaymentUtilityCompleted(this, new BillPaymentUtilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/BatchTransferUtility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string BatchTransferUtility(string CardAcqID, string transactionKey, string CardList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, out string RequestKey) {
            object[] results = this.Invoke("BatchTransferUtility", new object[] {
                        CardAcqID,
                        transactionKey,
                        CardList,
                        TerminalId,
                        RedirectURL,
                        MerchantAdditionalData,
                        CustomerEmailAddress});
            RequestKey = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatchTransferUtilityAsync(string CardAcqID, string transactionKey, string CardList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress) {
            this.BatchTransferUtilityAsync(CardAcqID, transactionKey, CardList, TerminalId, RedirectURL, MerchantAdditionalData, CustomerEmailAddress, null);
        }
        
        /// <remarks/>
        public void BatchTransferUtilityAsync(string CardAcqID, string transactionKey, string CardList, string TerminalId, string RedirectURL, string MerchantAdditionalData, string CustomerEmailAddress, object userState) {
            if ((this.BatchTransferUtilityOperationCompleted == null)) {
                this.BatchTransferUtilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchTransferUtilityOperationCompleted);
            }
            this.InvokeAsync("BatchTransferUtility", new object[] {
                        CardAcqID,
                        transactionKey,
                        CardList,
                        TerminalId,
                        RedirectURL,
                        MerchantAdditionalData,
                        CustomerEmailAddress}, this.BatchTransferUtilityOperationCompleted, userState);
        }
        
        private void OnBatchTransferUtilityOperationCompleted(object arg) {
            if ((this.BatchTransferUtilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchTransferUtilityCompleted(this, new BatchTransferUtilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/CalcTimeStamp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string CalcTimeStamp() {
            object[] results = this.Invoke("CalcTimeStamp", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalcTimeStampAsync() {
            this.CalcTimeStampAsync(null);
        }
        
        /// <remarks/>
        public void CalcTimeStampAsync(object userState) {
            if ((this.CalcTimeStampOperationCompleted == null)) {
                this.CalcTimeStampOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalcTimeStampOperationCompleted);
            }
            this.InvokeAsync("CalcTimeStamp", new object[0], this.CalcTimeStampOperationCompleted, userState);
        }
        
        private void OnCalcTimeStampOperationCompleted(object arg) {
            if ((this.CalcTimeStampCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalcTimeStampCompleted(this, new CalcTimeStampCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CheckStatusResult {
        
        private string refrenceNumberField;
        
        private string bankReciptNumberField;
        
        private bool newlyCommittedField;
        
        private int failCodeField;
        
        private string responseCodeField;
        
        private long traceNoField;
        
        private string shamsiDateField;
        
        private System.DateTime realTransactionDateTimeField;
        
        private int appStatusField;
        
        private string appStatusDescriptionField;
        
        private int appStatusCodeField;
        
        private string customerCardNumberField;
        
        private string cardHolderAccNumberField;
        
        private string cardHolderNameField;
        
        /// <remarks/>
        public string RefrenceNumber {
            get {
                return this.refrenceNumberField;
            }
            set {
                this.refrenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public string BankReciptNumber {
            get {
                return this.bankReciptNumberField;
            }
            set {
                this.bankReciptNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool NewlyCommitted {
            get {
                return this.newlyCommittedField;
            }
            set {
                this.newlyCommittedField = value;
            }
        }
        
        /// <remarks/>
        public int FailCode {
            get {
                return this.failCodeField;
            }
            set {
                this.failCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public long TraceNo {
            get {
                return this.traceNoField;
            }
            set {
                this.traceNoField = value;
            }
        }
        
        /// <remarks/>
        public string ShamsiDate {
            get {
                return this.shamsiDateField;
            }
            set {
                this.shamsiDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RealTransactionDateTime {
            get {
                return this.realTransactionDateTimeField;
            }
            set {
                this.realTransactionDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public int AppStatus {
            get {
                return this.appStatusField;
            }
            set {
                this.appStatusField = value;
            }
        }
        
        /// <remarks/>
        public string AppStatusDescription {
            get {
                return this.appStatusDescriptionField;
            }
            set {
                this.appStatusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int AppStatusCode {
            get {
                return this.appStatusCodeField;
            }
            set {
                this.appStatusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerCardNumber {
            get {
                return this.customerCardNumberField;
            }
            set {
                this.customerCardNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CardHolderAccNumber {
            get {
                return this.cardHolderAccNumberField;
            }
            set {
                this.cardHolderAccNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CardHolderName {
            get {
                return this.cardHolderNameField;
            }
            set {
                this.cardHolderNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Transaction {
        
        private long messageTypeIdField;
        
        private string cardNumberField;
        
        private string processingCodeField;
        
        private long amountTransField;
        
        private string dateTimeSendShetabField;
        
        private int traceNoField;
        
        private long timeLocalTransField;
        
        private long dateLocalTransField;
        
        private string typeOfPinInputField;
        
        private string terminalTypeField;
        
        private long merchantBankIdField;
        
        private long issueBankIdField;
        
        private long retrivalRefNoField;
        
        private string refrenceNumberField;
        
        private string responseField;
        
        private int responseCodeField;
        
        private long terminalIdField;
        
        private long cardAcqIdField;
        
        private string cardAcqNameField;
        
        private string currencyCodeField;
        
        private string merchantUrlField;
        
        private string merchantIPField;
        
        private long orderIdField;
        
        private string appStatusField;
        
        private string failCodeField;
        
        private string stateListField;
        
        private string updateTimeField;
        
        private string createDateTimeField;
        
        private string requestKeyField;
        
        private string shamsiDateField;
        
        private string tblNameField;
        
        private string destinationCardHolderNameField;
        
        private string cardHolderEmailAddressField;
        
        private string destinationAccountNumberField;
        
        private string additionalData_Transaction_P48Field;
        
        private string secondAccNumberField;
        
        private string additionalData_TransactionLicenseField;
        
        private System.Nullable<int> lineField;
        
        private long billIDField;
        
        private long billPaymentIDField;
        
        private string cardHolderIPField;
        
        private string merchantAdditionalDataField;
        
        private string destinationPrimaryAccNumField;
        
        /// <remarks/>
        public long MessageTypeId {
            get {
                return this.messageTypeIdField;
            }
            set {
                this.messageTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string CardNumber {
            get {
                return this.cardNumberField;
            }
            set {
                this.cardNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ProcessingCode {
            get {
                return this.processingCodeField;
            }
            set {
                this.processingCodeField = value;
            }
        }
        
        /// <remarks/>
        public long AmountTrans {
            get {
                return this.amountTransField;
            }
            set {
                this.amountTransField = value;
            }
        }
        
        /// <remarks/>
        public string DateTimeSendShetab {
            get {
                return this.dateTimeSendShetabField;
            }
            set {
                this.dateTimeSendShetabField = value;
            }
        }
        
        /// <remarks/>
        public int TraceNo {
            get {
                return this.traceNoField;
            }
            set {
                this.traceNoField = value;
            }
        }
        
        /// <remarks/>
        public long TimeLocalTrans {
            get {
                return this.timeLocalTransField;
            }
            set {
                this.timeLocalTransField = value;
            }
        }
        
        /// <remarks/>
        public long DateLocalTrans {
            get {
                return this.dateLocalTransField;
            }
            set {
                this.dateLocalTransField = value;
            }
        }
        
        /// <remarks/>
        public string TypeOfPinInput {
            get {
                return this.typeOfPinInputField;
            }
            set {
                this.typeOfPinInputField = value;
            }
        }
        
        /// <remarks/>
        public string TerminalType {
            get {
                return this.terminalTypeField;
            }
            set {
                this.terminalTypeField = value;
            }
        }
        
        /// <remarks/>
        public long MerchantBankId {
            get {
                return this.merchantBankIdField;
            }
            set {
                this.merchantBankIdField = value;
            }
        }
        
        /// <remarks/>
        public long IssueBankId {
            get {
                return this.issueBankIdField;
            }
            set {
                this.issueBankIdField = value;
            }
        }
        
        /// <remarks/>
        public long RetrivalRefNo {
            get {
                return this.retrivalRefNoField;
            }
            set {
                this.retrivalRefNoField = value;
            }
        }
        
        /// <remarks/>
        public string RefrenceNumber {
            get {
                return this.refrenceNumberField;
            }
            set {
                this.refrenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Response {
            get {
                return this.responseField;
            }
            set {
                this.responseField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public long TerminalId {
            get {
                return this.terminalIdField;
            }
            set {
                this.terminalIdField = value;
            }
        }
        
        /// <remarks/>
        public long CardAcqId {
            get {
                return this.cardAcqIdField;
            }
            set {
                this.cardAcqIdField = value;
            }
        }
        
        /// <remarks/>
        public string CardAcqName {
            get {
                return this.cardAcqNameField;
            }
            set {
                this.cardAcqNameField = value;
            }
        }
        
        /// <remarks/>
        public string CurrencyCode {
            get {
                return this.currencyCodeField;
            }
            set {
                this.currencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string MerchantUrl {
            get {
                return this.merchantUrlField;
            }
            set {
                this.merchantUrlField = value;
            }
        }
        
        /// <remarks/>
        public string MerchantIP {
            get {
                return this.merchantIPField;
            }
            set {
                this.merchantIPField = value;
            }
        }
        
        /// <remarks/>
        public long OrderId {
            get {
                return this.orderIdField;
            }
            set {
                this.orderIdField = value;
            }
        }
        
        /// <remarks/>
        public string AppStatus {
            get {
                return this.appStatusField;
            }
            set {
                this.appStatusField = value;
            }
        }
        
        /// <remarks/>
        public string FailCode {
            get {
                return this.failCodeField;
            }
            set {
                this.failCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StateList {
            get {
                return this.stateListField;
            }
            set {
                this.stateListField = value;
            }
        }
        
        /// <remarks/>
        public string UpdateTime {
            get {
                return this.updateTimeField;
            }
            set {
                this.updateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string CreateDateTime {
            get {
                return this.createDateTimeField;
            }
            set {
                this.createDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string RequestKey {
            get {
                return this.requestKeyField;
            }
            set {
                this.requestKeyField = value;
            }
        }
        
        /// <remarks/>
        public string ShamsiDate {
            get {
                return this.shamsiDateField;
            }
            set {
                this.shamsiDateField = value;
            }
        }
        
        /// <remarks/>
        public string tblName {
            get {
                return this.tblNameField;
            }
            set {
                this.tblNameField = value;
            }
        }
        
        /// <remarks/>
        public string DestinationCardHolderName {
            get {
                return this.destinationCardHolderNameField;
            }
            set {
                this.destinationCardHolderNameField = value;
            }
        }
        
        /// <remarks/>
        public string CardHolderEmailAddress {
            get {
                return this.cardHolderEmailAddressField;
            }
            set {
                this.cardHolderEmailAddressField = value;
            }
        }
        
        /// <remarks/>
        public string DestinationAccountNumber {
            get {
                return this.destinationAccountNumberField;
            }
            set {
                this.destinationAccountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AdditionalData_Transaction_P48 {
            get {
                return this.additionalData_Transaction_P48Field;
            }
            set {
                this.additionalData_Transaction_P48Field = value;
            }
        }
        
        /// <remarks/>
        public string SecondAccNumber {
            get {
                return this.secondAccNumberField;
            }
            set {
                this.secondAccNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AdditionalData_TransactionLicense {
            get {
                return this.additionalData_TransactionLicenseField;
            }
            set {
                this.additionalData_TransactionLicenseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public long BillID {
            get {
                return this.billIDField;
            }
            set {
                this.billIDField = value;
            }
        }
        
        /// <remarks/>
        public long BillPaymentID {
            get {
                return this.billPaymentIDField;
            }
            set {
                this.billPaymentIDField = value;
            }
        }
        
        /// <remarks/>
        public string CardHolderIP {
            get {
                return this.cardHolderIPField;
            }
            set {
                this.cardHolderIPField = value;
            }
        }
        
        /// <remarks/>
        public string MerchantAdditionalData {
            get {
                return this.merchantAdditionalDataField;
            }
            set {
                this.merchantAdditionalDataField = value;
            }
        }
        
        /// <remarks/>
        public string DestinationPrimaryAccNum {
            get {
                return this.destinationPrimaryAccNumField;
            }
            set {
                this.destinationPrimaryAccNumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckRequestStatusWithRealTransactionDateTimeCompletedEventHandler(object sender, CheckRequestStatusWithRealTransactionDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRequestStatusWithRealTransactionDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRequestStatusWithRealTransactionDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RetrivalRefNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string AppStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string RealTransactionDateTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckRequestStatusCompletedEventHandler(object sender, CheckRequestStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRequestStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRequestStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RetrivalRefNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string AppStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckRequestStatusExCompletedEventHandler(object sender, CheckRequestStatusExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRequestStatusExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRequestStatusExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RetrievalRefNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string AppStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckRequestStatusExWithRealTransactionDateTimeCompletedEventHandler(object sender, CheckRequestStatusExWithRealTransactionDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRequestStatusExWithRealTransactionDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRequestStatusExWithRealTransactionDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RetrievalRefNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string AppStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string RealTransactionDateTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckRequestStatusResultCompletedEventHandler(object sender, CheckRequestStatusResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRequestStatusResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRequestStatusResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetRequestStatusResultCompletedEventHandler(object sender, GetRequestStatusResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRequestStatusResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRequestStatusResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetAuthRequestStatusCompletedEventHandler(object sender, GetAuthRequestStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthRequestStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthRequestStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckBatchTransferStatusCompletedEventHandler(object sender, CheckBatchTransferStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBatchTransferStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBatchTransferStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckBillStatusCompletedEventHandler(object sender, CheckBillStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBillStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBillStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckStatusResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckStatusResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetSpecificMerchantCommitReportByPageNumberCompletedEventHandler(object sender, GetSpecificMerchantCommitReportByPageNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpecificMerchantCommitReportByPageNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpecificMerchantCommitReportByPageNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Transaction[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Transaction[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int TotalPage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCommitReportByPageNumberCompletedEventHandler(object sender, GetCommitReportByPageNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommitReportByPageNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommitReportByPageNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int TotalPage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string XMLReportSchema {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCommitReportCompletedEventHandler(object sender, GetCommitReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommitReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommitReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string XMLReportSchema {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTransactionReportCompletedEventHandler(object sender, GetTransactionReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string XMLReportSchema {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTransactionReportByPageNumberCompletedEventHandler(object sender, GetTransactionReportByPageNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionReportByPageNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionReportByPageNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int TotalPage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string XMLReportSchema {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetTransactionReportWithSettlementDateByPageNumberCompletedEventHandler(object sender, GetTransactionReportWithSettlementDateByPageNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionReportWithSettlementDateByPageNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionReportWithSettlementDateByPageNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int TotalPage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string XMLReportSchema {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GeneratePaymentIDCompletedEventHandler(object sender, GeneratePaymentIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePaymentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePaymentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void ValidatePaymentIDCompletedEventHandler(object sender, ValidatePaymentIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidatePaymentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidatePaymentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GenerateCheckDigitCompletedEventHandler(object sender, GenerateCheckDigitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateCheckDigitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateCheckDigitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PaymentUtilityCompletedEventHandler(object sender, PaymentUtilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentUtilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentUtilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RequestKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PaymentUtilityAdditionalDataCompletedEventHandler(object sender, PaymentUtilityAdditionalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentUtilityAdditionalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentUtilityAdditionalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RequestKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PaymentUtilityOptionalParameterCompletedEventHandler(object sender, PaymentUtilityOptionalParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PaymentUtilityOptionalParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PaymentUtilityOptionalParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RequestKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void BillPaymentUtilityCompletedEventHandler(object sender, BillPaymentUtilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BillPaymentUtilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BillPaymentUtilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RequestKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void BatchTransferUtilityCompletedEventHandler(object sender, BatchTransferUtilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchTransferUtilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatchTransferUtilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RequestKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CalcTimeStampCompletedEventHandler(object sender, CalcTimeStampCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalcTimeStampCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalcTimeStampCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591